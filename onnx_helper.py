import os, sys
import csv
import pandas as pd
from PIL import Image
import numpy as np


class HiddenPrints:
    """
    Suppress console output via the with keyword:\n
    with HiddenPrints():
        do something
    """

    def __enter__(self):
        self._original_stdout = sys.stdout
        sys.stdout = open(os.devnull, "w")

    def __exit__(self, exc_type, exc_val, exc_tb):
        sys.stdout.close()
        sys.stdout = self._original_stdout


class CsvHandler:
    """
    Manage the .csv generated by the tool
    """

    def __init__(self, csvfile):
        """
        Initialize the object of the class

        :param csvfile: the path to .csv file
        """
        self.csvfile = csvfile
        # Extract the header
        with open(csvfile, newline="") as f:
            reader = csv.reader(f)
            self.header = next(reader)
        # Delete the rows containing the name of the variables
        row_list = self._remove_extra_rows(csvfile)
        # Generate a pandas dataframe from row_list and convert the columns to numeric so that we can later compute the average times
        self.df = pd.DataFrame(row_list, columns=self.header).apply(pd.to_numeric, errors="ignore")

    def _remove_extra_rows(self, csvfile):
        """
        Delete from a file the rows containing the name of the variables which are written once at each repetition

        :param csvfile: the path to .csv file
        :return: the rows of the file as a list
        """
        lines = list()
        with open(csvfile, "r") as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                lines.append(row)
                for field in row:
                    if field == "1stInfTime":
                        lines.remove(row)
        return lines

    def mean(self):
        """
        Compute the average times

        :return: a pandas dataframe with the average value of all the numeric variables grouped by the second split point
        """
        return self.df.groupby(["splitPoint1", "splitPoint2"]).mean()

    def export_mean_values(self):
        """
        Generate the file with the average times
        """
        mean_values = self.mean()
        self.output_file = self.csvfile.replace(".csv", "_avg.csv")
        mean_values.to_csv(self.output_file)

    def reorder(self, global_order):
        """
        Reorder the rows of the average file depending on the order of the split point of the onnx model

        :param gloabal_order: a list with the order of the split points of the onnx model
        """
        order = f7(self.df["splitPoint2"].tolist())
        print(global_order)
        order = sorted(order, key=global_order.index)
        df = pd.read_csv(self.output_file)
        df = df.set_index("splitPoint2").reindex(order).reset_index()
        df.to_csv(self.output_file, index=False)


def load_img(image_file, img_size_x, img_size_y, is_grayscale):
    """
    Load an image, scale it and convert it into a numpy array

    :param image_file: the path to the image
    :param img_size_x: the horizontal size of the image after the scaling
    :param img_size_y: the vertical size of the image after the scaling
    :param is_grayscale: true if the image is grayscale, false otherwise
    :return: a numpy array of size (img_size_x, img_size_y, 3)
    """
    img = Image.open(image_file)
    img.load()
    img = img.resize((img_size_x, img_size_y))
    return np.asarray(img, dtype="float32")


def f7(seq):
    """
    Extract a subsequence without duplicates from seq while maintaining the original order of the items

    :param seq: a list
    :return: a sublist containing all the elements of seq without duplicates
    """
    seen = set()
    seen_add = seen.add
    return [x for x in seq if not (x in seen or seen_add(x))]
